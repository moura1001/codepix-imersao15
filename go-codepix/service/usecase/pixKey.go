package usecase

import (
	"fmt"

	"github.com/moura1001/codepix/domain/model"
)

type PixKeyUseCase struct {
	repository model.IPixKeyRepository
}

func NewPixKeyUseCase(repository model.IPixKeyRepository) PixKeyUseCase {
	return PixKeyUseCase{
		repository: repository,
	}
}

func (p *PixKeyUseCase) RegisterKey(key string, kind string, accountNumber string, bankCode string) (*model.PixKey, error) {
	errMsgTemplate := "error to register pix key in repository. Details: '%s'"

	account, _, err := p.repository.FindAccountByNumber(bankCode, accountNumber)
	if err != nil {
		return nil, fmt.Errorf(errMsgTemplate, err)
	}

	pixKey, err := model.NewPixKey(kind, key, account)
	if err != nil {
		return nil, fmt.Errorf(errMsgTemplate, err)
	}

	pixKeyInserted, err := p.repository.RegisterKey(pixKey)
	if err != nil {
		return nil, fmt.Errorf(errMsgTemplate, err)
	}

	if pixKeyInserted == nil {
		return nil, fmt.Errorf(errMsgTemplate+"pix key (key=%s, kind=%s, bankCode=%s, accountNumber=%s) not inserted", key, kind, bankCode, accountNumber)
	}

	if pixKeyInserted != nil || pixKeyInserted.Id != pixKey.Id {
		return nil, fmt.Errorf(errMsgTemplate+"an inconsistency was detected. The key entered in the database '%s' was different from the one generated by the server '%s'", pixKeyInserted.Id, pixKey.Id)
	}

	return pixKeyInserted, nil
}

func (p *PixKeyUseCase) FindKey(key string, kind string) (*model.PixKey, error) {
	pixKey, _, err := p.repository.FindKeyByKind(key, kind)
	if err != nil {
		return nil, fmt.Errorf("error to find pix key in repository. Details: '%s'", err)
	}
	return pixKey, nil
}

func (p *PixKeyUseCase) RegisterBank(code string, name string) error {
	errMsgTemplate := "error to register bank in repository. details: '%s'"

	bankDb, isErrRecordNotFound, err := p.repository.FindBankByCode(code)
	if bankDb != nil {
		return fmt.Errorf(errMsgTemplate, "bank already resgistrated")
	}
	if err != nil && !isErrRecordNotFound {
		return fmt.Errorf(errMsgTemplate, err)
	}

	bank, err := model.NewBank(code, name)
	if err != nil {
		return fmt.Errorf(errMsgTemplate, err)
	}

	err = p.repository.AddBank(bank)
	if err != nil {
		return fmt.Errorf(errMsgTemplate, err)
	}

	return nil
}

func (p *PixKeyUseCase) RegisterAccount(accountName string, accountNumber string, bankCode string) error {
	errMsgTemplate := "error to register account in repository. details: '%s'"

	bank, _, err := p.repository.FindBankByCode(bankCode)
	if err != nil {
		return fmt.Errorf(errMsgTemplate, err)
	}

	accountDb, isErrRecordNotFound, err := p.repository.FindAccountByNumber(bankCode, accountNumber)
	if accountDb != nil {
		return fmt.Errorf(errMsgTemplate, "account already resgistrated")
	}
	if err != nil && !isErrRecordNotFound {
		return fmt.Errorf(errMsgTemplate, err)
	}

	account, err := model.NewAccount(accountName, accountNumber, bank)
	if err != nil {
		return fmt.Errorf(errMsgTemplate, err)
	}

	err = p.repository.AddAccount(account)
	if err != nil {
		return fmt.Errorf(errMsgTemplate, err)
	}

	return nil

}
